[build-system]
requires = [
    "maturin>=1.5",
    "mujoco>=3.0.0",  # Ensures mujoco is available during build process
]
build-backend = "maturin"

# TODO: Clean up maturin package handling
[tool.maturin]
module-name = "mujoco_toolbox._mjrs"
python-source = "."
features = ["pyo3/extension-module"]
binding = "pyo3"
mixed = true
include = [
  "Cargo.toml",
  "Cargo.lock",
  "src/**/*",
  "mujoco_toolbox/**/*"
]

[project]
name = "mujoco-toolbox"
version = "0.6.3"
requires-python = ">=3.9,<4.0"
description = "A Modern Simulation Wrapper for Google DeepMind's MuJoCo"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
  { name = "MGross21", email = "MGross21@example.com" }
]
keywords = ["MuJoCo", "mujoco", "robotics", "simulation", "toolbox", "wrapper", "rust"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Rust",
    "Operating System :: OS Independent"
]
dynamic = ["classifiers","dependencies"]

dependencies = [
  "mujoco",
  "numpy",
  "matplotlib",
  "pyyaml",
  "ffmpeg",
  "imageio[ffmpeg]",
  "trimesh",
  "tqdm",
  "ipywidgets",
  "jinja2",
  "screeninfo",
  "colorama",
  "rich",
  "defusedxml>=0.7.1",
]

[project.optional-dependencies]
gym = ["gym", "gymnasium"]  # Optional runtime features

[dependency-groups]
# Docs: https://packaging.python.org/en/latest/specifications/dependency-groups/
test = [
    "pytest>=8.3.5",
    "pytest-cov>=3.0.0",
    "pytest-xdist",  # Parallel testing
]

lint = [
    "ruff>=0.11.2",
    "mypy>=1.8.0",
    "black>=25.1.0",
]

docs = [
    "sphinx>=8.2.3; python_version >= '3.11'",
    "sphinx-rtd-theme>=3.0.2",
    "myst-parser",       # Markdown support in Sphinx
]

build = [
    "maturin>=1.5,<2.0",
]

release = [
    "python-semantic-release>=9.21.0",
    "python-dotenv>=1.1.0",
]

# Compose groups
dev = [ 
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "docs"},
    {include-group = "build"},
    {include-group = "release"}
]
ci = [
    {include-group = "test"},
    {include-group = "lint"}
]

[project.urls]
homepage = "https://github.com/MGross21/mujoco-toolbox"
repository = "https://github.com/MGross21/mujoco-toolbox"
documentation = "https://mgross21.github.io/mujoco-toolbox/"
changelog = "https://github.com/MGross21/mujoco-toolbox/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/MGross21/mujoco-toolbox/issues"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.dev]
match = "dev"
prerelease = true

[tool.semantic_release]
version_variables = [
    "pyproject.toml:version",
    "mujoco_toolbox/__init__.py:__version__",
    "CITATION.cff:version",
    "Cargo.toml:version"

]
changelog_file = "CHANGELOG.md"
build_command = "maturin build --release"
dist_path = "target/wheels/"
upload_to_pypi = true
upload_to_release = true
commit_version_number = true
tag_format = "v{version}"
commit_message = "chore(release): {version} [skip ci]"

[tool.semantic_release.commit_analyzer]
preset = "angular"
release_rules = [
    { type = "feat", release = "minor" },
    { type = "fix", release = "patch" },
    { type = "perf", release = "patch" },
    { type = "refactor", release = "patch" },
    { type = "docs", release = false },
    { type = "style", release = false },
    { type = "chore", release = false },
    { type = "build", release = false },
    { type = "ci", release = false },
    { type = "test", release = false }
]
parser_opts = {allowed_tags = [
        "build",
        "chore",
        "ci",
        "docs",
        "feat",
        "fix",
        "perf",
        "style",
        "refactor",
        "test"]}

[tool.semantic_release.release_notes_generator]
preset = "angular"
preset_config = {types = [
        { type = "feat", section = "Features", hidden = false },
        { type = "fix", section = "Bug Fixes", hidden = false },
        { type = "perf", section = "Performance Improvements", hidden = false },
        { type = "refactor", section = "Refactors", hidden = false }
    ]}

[tool.black]
line-length = 79 # PEP8 line length

[tool.ruff]
line-length = 79 # PEP8 line length

[tool.ruff.lint]
# select = ["E", "F", "W", "C90"]  # Select error, warning, and flake8 rules
select = ["ALL"]    # Enable all rules
ignore = ["T20","INP001"]    # Rules to Ignore
fixable = ["ALL"]   # Enable auto-fixing for all fixable issues
extend-select = ["I", "B", "Q", "S"]
exclude = [
    "*venv/", "*__pycache__", "build/", "dist/", "target/",
    ".tox/", ".eggs/", ".git/", ".idea/", ".mypy_cache/"
]  # Exclude these directories from linting

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
strict_optional = true